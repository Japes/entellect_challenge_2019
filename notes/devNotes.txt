TODO

	print out total N calculated and total N in mc class

	make a rubric of cost/benefit                                           EFFORT         PAYOFF
      banana (only if awesome) /snowball (no re).  use if low health.      low            high
      staged evaluation functions (master control alg) (see safe mode)     medium/high    high
	   rework output messages for a graphical view                          medium         medium/high
      select cleverness                                                    low            medium
      optimization                                                         medium/low     medium
      building actual tree:                                                high,          medium
      adding pattern rec to playouts                                       medium         medium/low
      fix engine edge cases                                                medium/high    low
      play with evaluation function (score up)                             low            medium/low?
      resolve ties with random (mc and nextmove)                           low            low?
	

   basic trends im seeing
      dance ftw
      eventual kill because u have min health
      3 phases - early (mine) - mid (skirmishes) - late (fight/dance)

   runs
      tonight
         PATTERN RECOG (32 V 31)
         SELECT AWAY FROM FROZEN WORMS
      tomorrow morn
         LEON vs 2 best

      PLAY WITH NODE DEPTH
      HEURISTIC IMPROVEMENT
         heuristic improvement: higher score weight

   put max division thing inside the evaluators...

   banana health deny...

   would making playout depth variable help?
      would be nice to have some long ones...

	i want that sweet sweet playout till the end

   "Safe mode"
		try taking out shooting directly - "safe mode"
			only shoot at places opponent could move to
      explicit exclude of potential game ending move
      explicit exclude of all chances for opponent to shoot?

   optimization
      precompute as much as possible e.g. can i shoot this guy
         want a lookup table of posdiff -> bitvector of shoot directions
         try to keep precomputed structures small (within cache)
		Worm_at is a bottleneck, can maybe maintain a lookup table of worm positions, and just return that
         will have to update it every time a worm is moved
      might need to consider taking shortcuts and not simulating 100%
      make data structures smaller

   can still get kill score on the turn that lava kills someone...
   
--not immediate---------------------------------------------------------------------------------------------

	add select to mc?

   Tuning
      make bot tunable via config file
      update tournament script
      upload after doing this if better
      TUNE:
         playthroughDepth
         banana score threshold
         C value
         playthrough weights

   run compare over LOTS of matches
      fix engine bugs
	  
   heavier playthroughs (biases)
      bias towards shooting (for opponent)
      bias based on observed behaviour
         does the dude go for 1-offs
         does he always shoot
         does he always dodge

   consider 1-off snowballing if the dude can't move

   handle monte carlo ties
      make monte carlo choose random if tie
      better yet use heuristic

   need to try to get more into the monta carlos.  
      off-by-one banana hits aren't considered...

--prob wont do----------------------------------------------------------------------------------------------

   update reference bot so it's more usefull...
      use bananas
      use select
	  
   why is n wrong in actual runs
      things are a bit worse when there's another bot running - test runs on a quieter system

====================================================================================================================================================
====================================================================================================================================================

questions i have for chouf:--------------------------------------
         how important is it to get the health pack
         how important is score (do matches ever go to score)
            what if 1 worm is a coward?
         how important is snowball/banana use
            or does it all come down to shootouts
         numbers - is it better to have more worms, or rather fewer stronger worms

sort out deployment---------------
        copy bot folder
        remove bin/rounds
        drag in 
            gameengine 
            random lib
            Utilities
        *get rid of all cerr?
            use a log wrapper function that can be disabled
        *make changes to makefile (folders)
            make sure its not a debug build
            undefine EXCEPTION_ON_ERROR
         make sure it compiles
         do a make clean
         zip it up

        known issue: with cell.cpp (global method)
        known issue: with std::sqrt NEED TO INCLUDE <CMATH> EVERYWHERE YOU DO THIS
        known issue: incorrect case in header includes


MISC NOTES--------------------
to scan match logs for No Commands:
   find . -wholename "*JP3/PlayerCommand*" -exec grep -A 1 "No Command" {} +
   find . -wholename "*JP3/PlayerCommand*" -exec grep -A 1 "nothing" {} +

to count number of moves of a certain type (note this isn't a true count, but its ok for relative comparisons)
   find . -wholename "*UltraSnob/PlayerCommand*" -exec grep -A 1 "Command: move" {} + | wc -l

BRAINSTORMING---------------------------------------------------------------------------------------

   snowball
      you can select away from the snowballed guy

   use heuristic if all monte carlos are tied
      or off by <numplaythroughs>

    try
       playthroughs considering only nearby worms
        if theres a tie choose random
        monte carlo with evaluation
            bias moves in favour of continuing in the same direction
            getting invalid moves
            check which one is better, trim or no
            returns scores from playthroughs (not just +/-1)
            run sims on a per worm basis
            run matches with extended play time
                confirm that longer playtime makes smarter bot
                check if bot wins sooner with longer play time?
        minimax with evaluation
            plug in strategies for each player
            learn/estimate strategy while you play??
        "mixed" strategy?

        coward worms? make the enemy waste time

        if you don't use select early on you've wasted it
         check if im just using +-1 for playthroughs - should prob add bias there
         disregard moves that would result in instant loss...
         penalise playthroughs that result in loss heavily
         do the move-in-a-line bias for yourself and the other worms

         (the opponent worms, during the playthrough)
         Prune the search tree by recognising symmetries

to run bot on state file:--------------------------------------------
 - copy JsonMap.json file (in players directory for that round) to bin/rounds/roundnumber/state.json
 - cd into bin folder
 - run bot
 - input round number

notes for blog post---------------------------------------------------
   automation important!
      running matches
      making new bot
      analysis scripts
   slow and steady - unit tests!
   analysis
      scripts
      spreadsheets (not sure if that was helpful but it was fun)
   optimization
      interrupt method - link to stack overflow
   monte carlo method
   made sure i had a really solid engine
   reuse for next time
      didnt use last years because it was messy etc but could use this stuff for next time
   put stuff on github and link to it
   be scientific and record everything (comparison logs)
   spent a bit of time going through their source code for engine
   downsides
      long to run, hard to tune
      sensitive to edge cases in game state
   devnotes file, constantly reprioritising

======================================================================================================

last time i checked it looks like we're spending about 50% of the time in GetRandomValidMoveForPlayer
   when there are worms nearby GetValidShoots dominates because of the "consider movement" thing
   otherwise a noticable bottleneck is GameState::Worm_at in NextTurn::GetValidTeleportDigs

