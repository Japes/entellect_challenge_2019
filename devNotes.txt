TODO

   smaller structs
   playoffs with points bot 
   
   UPDATE TO NEW STARTER PACK
      run compare over LOTS of matches
         fix engine bugs

   update analysis script to show N
   get match stats for chouf
   
   test aggro vs points bot

   could consider snowballing where ppl COULD be

   finish the loading of previous_move into state
      see [.broken] unit test
      make unit test to confirm that carry-over state is correct
         num selects
         num bananas
         num snowballs
      Need to prevent getting danced
         opponent move tracking

	optimization
		Worm_at is a bottleneck, can maybe maintain a lookup table of worm positions, and just return that
         will have to update it every time a worm is moved
      might need to consider taking shortcuts and not simulating 100%
      make data structures smaller
      precompute as much as possible e.g. can i shoot this guy
      try to keep precomputed structures small (within cache)

   heavier playthroughs (biases)
      bias towards shooting (for opponent)
      bias based on observed behaviour
      
   explicit exclude of potential game ending move
      try taking out shooting directly - "safe mode"
      safe mode
         only shoot at places opponent could move to
      explicit exclude of all chances for opponent to shoot?
         add unit tests for this

   store MC results of first level

   handle monte carlo ties
      make monte carlo choose random if tie
      better yet use heuristic

   need to try to get more into the monta carlos.  
      off-by-one banana hits aren't considered...

   Tuning
      make bot tunable via config file
      update tournament script
      upload after doing this if better
      TUNE:
         playthroughDepth
            DOESN'T SEEM TO MAKE A DIFFERENCE? my monte carlo must not be doing anything valuable
         banana score threshold
         C value
         playthrough weights

   update reference bot so it's more usefull...
      use bananas
      use select

sort out deployment---------------
        copy bot folder
        remove bin/rounds
        drag in 
            gameengine 
            random lib
            Utilities
        *get rid of all cerr?
            use a log wrapper function that can be disabled
        *make changes to makefile (folders)
            make sure its not a debug build
            undefine EXCEPTION_ON_ERROR
         make sure it compiles
         do a make clean
         zip it up

        known issue: with cell.cpp (global method)
        known issue: with std::sqrt NEED TO INCLUDE <CMATH> EVERYWHERE YOU DO THIS
        known issue: incorrect case in header includes


MISC NOTES--------------------
to scan match logs for No Commands:
   find . -wholename "*JP3/PlayerCommand*" -exec grep -A 1 "No Command" {} +
   find . -wholename "*JP3/PlayerCommand*" -exec grep -A 1 "nothing" {} +

to count number of moves of a certain type (note this isn't a true count, but its ok for relative comparisons)
   find . -wholename "*UltraSnob/PlayerCommand*" -exec grep -A 1 "Command: move" {} + | wc -l

BRAINSTORMING---------------------------------------------------------------------------------------

   snowball
      you can select away from the snowballed guy

   use heuristic if all monte carlos are tied
      or off by <numplaythroughs>

    try
       playthroughs considering only nearby worms
        if theres a tie choose random
        monte carlo with evaluation
            bias moves in favour of continuing in the same direction
            getting invalid moves
            check which one is better, trim or no
            returns scores from playthroughs (not just +/-1)
            run sims on a per worm basis
            run matches with extended play time
                confirm that longer playtime makes smarter bot
                check if bot wins sooner with longer play time?
        minimax with evaluation
            plug in strategies for each player
            learn/estimate strategy while you play??
        "mixed" strategy?

        coward worms? make the enemy waste time

        if you don't use select early on you've wasted it
         check if im just using +-1 for playthroughs - should prob add bias there
         disregard moves that would result in instant loss...
         penalise playthroughs that result in loss heavily
         do the move-in-a-line bias for yourself and the other worms

         (the opponent worms, during the playthrough)
         Prune the search tree by recognising symmetries

insights from replays-----------------------------------------------------------------
   bots can get "lost" if they are in wide open spaces
      check confidence of next move, use heuristics if not sure?
      happened against nico beukes
   reference bot strategy is quite popular
        
   WILLIE:
      playing style:
         looks like he's doing a monte carlo search
      why did he beat me?
         got me in a shooting dance! used a select to make it so the dancer played on the same turn, and that just made my points collection bad
      selects:
         he did a select so that he was playing at the same time as the dude he was in combat with! then he started dancing.  was this deliberate?

   ANDRE MAKAAL
      playing style:
         heuristic
            systematically digs all dirt around his position, then moves towards centre
            if it sees an enemy nearby, goes for it
            might be retreating once enemy health is low, not sure
            looks like he might have some gang up logic
      why did he beat me?
         ganged up on 1 worm midgame, both worms were getting hits every turn, this pushed his points up massively
         also got 2 kills on me
      selects:
         he only used one, right at the start so banana guy can go first

   MALLIN
      playing style:
         looks like he might be doing some kind of search, but he doesn't get lost
      why did he beat me?
         he got a kill right at the end, score boost won it for him
      selects:
         he used some at the end, i think in an attempt to grab the last few dirts      

   LEON
      in the end i think it was my dudes getting lost that did it

to run bot on state file:--------------------------------------------
 - copy file to bin/rounds/roundnumber/state.json
 - cd into bin folder
 - run bot
 - input round number

when making new bot:--------------------------------------------
 - up version in bot.json
 - up version in command.cpp
 - up version in bot.cpp

======================================================================================================

last time i checked it looks like we're spending about 50% of the time in GetRandomValidMoveForPlayer
   when there are worms nearby GetValidShoots dominates because of the "consider movement" thing
   otherwise a noticable bottleneck is GameState::Worm_at in NextTurn::GetValidTeleportDigs




#1  GameState::Worm_at(Position const&) (pos=<synthetic pointer>, this=0x7ffffe53fa60) at ../GameState/GameState.hpp:129
#2  NextTurn::GetValidTeleportDigs(Worm*, GameState*, bool) (worm=worm@entry=0x7ffffe53fbe8, state=state@entry=0x7ffffe53fa60, trimStupidMoves=trimStupidMoves@entry=true) at ../NextTurn.cpp:63
#3  0x00000000004a4db6 in NextTurn::GetRandomValidMoveForPlayer(bool, GameState*, bool) (player1=<optimized out>, state=0x7ffffe53fa60, trimStupidMoves=<optimized out>) at ../NextTurn.cpp:338

#1  GameState::Worm_at(Position const&) (pos=<synthetic pointer>, this=0x7ffffdd2fa60) at ../GameState/GameState.hpp:129
#2  NextTurn::GetValidTeleportDigs(Worm*, GameState*, bool) (worm=worm@entry=0x7ffffdd2fa80, state=state@entry=0x7ffffdd2fa60, trimStupidMoves=trimStupidMoves@entry=true) at ../NextTurn.cpp:63
#3  0x00000000004a4bd5 in NextTurn::GetRandomValidMoveForPlayer(bool, GameState*, bool) (player1=<optimized out>, state=0x7ffffdd2fa60, trimStupidMoves=<optimized out>) at ../NextTurn.cpp:338

#1  GameState::Worm_at(Position const&) (pos=<synthetic pointer>, this=0x7ffffe53fa60) at ../GameState/GameState.hpp:123
#2  NextTurn::GetValidTeleportDigs(Worm*, GameState*, bool) (worm=worm@entry=0x7ffffe53fa80, state=state@entry=0x7ffffe53fa60, trimStupidMoves=trimStupidMoves@entry=true) at ../NextTurn.cpp:63
#3  0x00000000004a4bd5 in NextTurn::GetRandomValidMoveForPlayer(bool, GameState*, bool) (player1=<optimized out>, state=0x7ffffe53fa60, trimStupidMoves=<optimized out>) at ../NextTurn.cpp:338