TODO

   how did that shocking bug in getIndex not cause any unit tests to fail
   maybe use bitsets everywhere so i dont get index confusion

   consecutivedonothing count for opponent isnt in file!
   previousposition is wrong when loading file!

    add verifier test for engine
       compare with previous bots after doing this (and of course fixing any issues that arose)
       upload after doing this if better

   add per-worm playthroughs

   explicit exclude of potential game ending move
      explicit exclude of all chances for opponent to shoot?

   make proper unit test for deep copy

   why does dodging not always work
      i think it's just the monte carlo that is dof
      Need to take KOs into account when evaluating!  not just score
         can i try to reproduce this and confirm it works 
            (maybe reference bot with specific seed)
            or just reference bot with my health real low

   low hanging fruit improvements (update and then compare against previous bot and ref bot)
      Need to avoid getting lost
         try using seed/jippo'd game state to reproduce this
         one solution - bias towards moving in a direction
         another solution - low confidence, go for heuristic 
            aim for big clump of dirt if health looking bad
            go for enemies if health looking good
            run away if at a points advantage
      upload after doing this if better
      
    Tuning
       make bot tunable via config file
       update tournament script
       upload after doing this if better

    add new rules to engine 
       compare with previous bots after doing this
       upload after doing this if better
       
    spreadsheet profile of opponents
       scrape logs to find their output
   
    optimise engine
        next steps:
            return just directions, create move/dig just before advancestate
            possibly bulk allocate list of all move/dig moves at startup

    runmatch script update
       look at using same seed for all matches?

    sort out deployment
        known issue: with cell.cpp (global method)
        known issue: with std::ceil line
           c++ std?
        known issue: incorrect case in header includes
        copy bot folder
        drag in gameengine and random lib
        remove bin/rounds
        make changes to makefile (folders)
        get rid of all cerr?
           use a log wrapper function that can be disabled
         make sure its not a debug build

BRAINSTORMING---------------------------------------------------------------------------------------

    try
       playthroughs considering only nearby worms
        if theres a tie choose random
        monte carlo with evaluation
            bias moves in favour of continuing in the same direction
            getting invalid moves
            check which one is better, trim or no
            returns scores from playthroughs (not just +/-1)
            run sims on a per worm basis
            run matches with extended play time
                confirm that longer playtime makes smarter bot
                check if bot wins sooner with longer play time?
        minimax with evaluation
            plug in strategies for each player
            learn/estimate strategy while you play??
        "mixed" strategy?

        if you don't use select early on you've wasted it
         check if im just using +-1 for playthroughs - should prob add bias there
         disregard moves that would result in instant loss...
         penalise playthroughs that result in loss heavily
         do the move-in-a-line bias for yourself and the other worms

         (the opponent worms, during the playthrough)
         Prune the search tree by recognising symmetries

insights from replays-----------------------------------------------------------------
        bots can get "lost" if they are in wide open spaces
            check confidence of next move, use heuristics if not sure?
            happened against nico beukes
        reference bot strategy is quite popular
        
latest profiling of performance unit test:--------------------------------------------
    GetRandomValidMoveForPlayer 
    GetValidMovesForWorm 
        new
        new
        new
        ?
        ?
        Cell_at


    ApplyPowerups
        Cell_at
            IsOnMap

    updatewincondition

    ShootCommand - execute


#5  std::shared_ptr<Command>::operator=(std::shared_ptr<Command>&&) (__r=<unknown type in /mnt/c/Users/jpdac/dev/entellect_challenge_2019/GameEngine/unittests/bin/unit_tests, CU 0x40b96e, DIE 0x4156e0>,             this=0x7ffffffed110) at /usr/include/c++/5/bits/shared_ptr.h:294                                                                                                              
#6  GameEngine::Playthrough(bool, std::shared_ptr<Command>, std::function<std::shared_ptr<Command> (bool, std::shared_ptr<GameState>)>, std::function<float (bool, std::shared_ptr<GameState>)>, int, int, int&) (     this=this@entry=0x7ffffffed2a0, player1=player1@entry=false, command=std::shared_ptr (count 3, weak 0) 0x70c940, nextMoveFn=..., evaluationFn=..., radiusToConsider=radiusToConsider@entry=-1, depth=-303,         numPlies=@0x7ffffffed20c: 302) at ../GameEngine.cpp:118 

#0  0x00000000004a629e in Position::MaximumDimension (this=this@entry=0x70d620, other=...) at ../GameState/Position.cpp:18
#1  0x00000000004a62b5 in Position::MovementDistanceTo (this=this@entry=0x70d620, other=...) at ../GameState/Position.cpp:24                                                                         #2  0x00000000004b29e2 in TeleportCommand::IsValid (this=0x70bd40, player1=<optimized out>, state=std::shared_ptr (count 3, weak 0) 0x729ef0) at ../Commands/TeleportCommand.cpp:65                  #3  0x00000000004a1f1b in GameEngine::AdvanceState (this=this@entry=0x7ffffffed2a0, player1_command=..., player2_command=...) at ../GameEngine.cpp:25                         

#1  0x00000000004a3ec0 in NextTurn::GetRandomValidMoveForPlayer

      #7  std::shared_ptr<TeleportCommand>::shared_ptr<std::allocator<TeleportCommand>, Position&> (__a=..., __tag=..., this=<optimized out>) at /usr/include/c++/5/bits/shared_ptr.h:319                  #8  std::allocate_shared<TeleportCommand, std::allocator<TeleportCommand>, Position&> (__a=...) at /usr/include/c++/5/bits/shared_ptr.h:620                                                          #9  std::make_shared<TeleportCommand, Position&> () at /usr/include/c++/5/bits/shared_ptr.h:636                                                                                                      #10 NextTurn::GetValidTeleportDigsForWorm (player1=player1@entry=true, state=std::shared_ptr (count 4, weak 0) 0x729ef0, trimStupidMoves=trimStupidMoves@entry=true) at ../NextTurn.cpp:53   

      #0  0x00000000004a33c6 in NextTurn::GetValidTeleportDigsForWorm (player1=player1@entry=false, state=std::shared_ptr (count 4, weak 0) 0x729ef0, trimStupidMoves=trimStupidMoves@entry=true) at ../NextTurn.cpp:48  #1  0x00000000004a3ec0 in NextTurn::GetRandomValidMoveForPlayer (player1=false, state=std::shared_ptr (count 4, weak 0) 0x729ef0, trimStupidMoves=true) at ../NextTurn.cpp:89 

      #0  0x00000000004a62cf in Position::IsOnMap (this=this@entry=0x7ffffffecf90) at ../GameState/Position.cpp:29                                                                                         #1  0x00000000004a33b0 in NextTurn::GetValidTeleportDigsForWorm (player1=player1@entry=true, state=std::shared_ptr (count 4, weak 0) 0x729ef0, trimStupidMoves=trimStupidMoves@entry=true) at ../NextTurn.cpp:48

      #9  std::make_shared<TeleportCommand, Position&> () at /usr/include/c++/5/bits/shared_ptr.h:636                                                                                                      #10 NextTurn::GetValidTeleportDigsForWorm (player1=player1@entry=false, state=std::shared_ptr (count 4, weak 0) 0x729ef0, trimStupidMoves=trimStupidMoves@entry=true) at ../NextTurn.cpp:53          #11 0x00000000004a3ec0 in NextTurn::GetRandomValidMoveForPlayer (player1=false, state=std::shared_ptr (count 4, weak 0) 0x729ef0, trimStupidMoves=true) at ../NextTurn.cpp:89


      #3  std::shared_ptr<ShootCommand>::~shared_ptr (this=<optimized out>, __in_chrg=<optimized out>) at /usr/include/c++/5/bits/shared_ptr.h:93                                                          #4  NextTurn::GetShootsForWorm (player1=player1@entry=false, state=std::shared_ptr (count 4, weak 0) 0x729ef0, trimStupidMoves=trimStupidMoves@entry=true) at ../NextTurn.cpp:76       

      #0  ShootCommand::WormOnTarget (player1=player1@entry=true, state=std::shared_ptr (count 5, weak 0) 0x729ef0, shootvector=...) at ../Commands/ShootCommand.cpp:72                                    #1  0x00000000004a395a in NextTurn::GetShootsForWorm (player1=player1@entry=true, state=std::shared_ptr (count 5, weak 0) 0x729ef0, trimStupidMoves=trimStupidMoves@entry=true) at ../

      #0  0x00000000004b1cd4 in ShootCommand::WormOnTarget (player1=player1@entry=true, state=std::shared_ptr (count 5, weak 0) 0x729ef0, shootvector=...) at ../Commands/ShootCommand.cpp:80              #1  0x00000000004a395a in NextTurn::GetShootsForWorm (player1=player1@entry=true, state=std::shared_ptr (count 5, weak 0) 0x729ef0, trimStupidMoves=trimStupidMoves@entry=true) at ../ 
      
      #2  0x00000000004a3ec0 in NextTurn::GetRandomValidMoveForPlayer (player1=true, state=std::shared_ptr (count 4, weak 0) 0x729ef0, trimStupidMoves=true) at ../NextTurn.cpp:89 

      #5  std::shared_ptr<Command>::~shared_ptr (this=<optimized out>, __in_chrg=<optimized out>) at /usr/include/c++/5/bits/shared_ptr.h:93                                                               #6  std::_Destroy<std::shared_ptr<Command> > (__pointer=<optimized out>) at /usr/include/c++/5/bits/stl_construct.h:93                                                                               #7  std::_Destroy_aux<false>::__destroy<std::shared_ptr<Command>*> (__last=<optimized out>, __first=0x70d750) at /usr/include/c++/5/bits/stl_construct.h:103                                         #8  std::_Destroy<std::shared_ptr<Command>*> (__last=<optimized out>, __first=<optimized out>) at /usr/include/c++/5/bits/stl_construct.h:126                                                        #9  std::_Destroy<std::shared_ptr<Command>*, std::shared_ptr<Command> > (__last=0x70d780, __first=<optimized out>) at /usr/include/c++/5/bits/stl_construct.h:151                                    #10 std::vector<std::shared_ptr<Command>, std::allocator<std::shared_ptr<Command> > >::~vector (this=0x7ffffffed020, __in_chrg=<optimized out>) at /usr/include/c++/5/bits/stl_vector.h:424          #11 NextTurn::GetRandomValidMoveForPlayer (player1=true, state=std::shared_ptr (count 3, weak 0) 0x729ef0, trimStupidMoves=<optimized out>) at ../NextTurn.cpp:89           


results analysis --------------------------------------------------------------------
increasing depth to 24 - no noticable improvement
   reducing to 15 - seems to actually be a bit worse
   reducing to 7 - noticably better than jp2, and does better against reference bot

using scorediff, and modifying c to 4, putting playthrough depth back to 24
   lost every game think i did it wrong....
   looking at UCT scores, looks like it converges too quickly, so try raising c to 8
   Need to get back to this after bug fixes

upped the time limit to 3s, improvement not great.  beats reference bot and 1s jp2 66% of the time
   (wins/draws/losses):     reference-bot            jp2                      jp3                      
   reference-bot:           0/0/0                    15/0/5                   5/0/15                   (20/0/20)
   jp2:                     5/0/15                   0/0/0                    6/0/14                   (11/0/29)
   jp3:                     15/0/5                   14/0/6                   0/0/0                    (29/0/11)

after fixing some edge case bugs in the engine and putting playthrough depth back to 24:
   (wins/draws/losses):     reference-bot            jp2                      jp3                      
   reference-bot:           0/0/0                    84/0/53                  70/0/67                  (154/0/120)
   jp2:                     53/0/84                  0/0/0                    17/0/120                 (70/0/204)
   jp3:                     67/0/70                  120/0/17                 0/0/0                    (187/0/87)