TODO

   2 weird cases:
      end of game showdown, i have more health - why not shoot him??
      my (not last) worm about to die - why not evade?

   they are too scared of agents - keep track of count
   
   optimise

   add select!

   Need to avoid getting lost
      try using seed/jippo'd game state to reproduce this
      one solution - bias towards moving in a direction
      another solution - low confidence, go for heuristic 
         aim for big clump of dirt if health looking bad
         go for enemies if health looking good
         run away if at a points advantage

   Tuning
       make bot tunable via config file
       update tournament script
       upload after doing this if better

   add some carry-over state
      ISSUE: I NEED TO KEEP TRACK OF ENEMY BANANA BOMBS
         currently always assuming he has 3 - it's not in the state file
      consecutivedonothing count for opponent isnt in file!
      previousposition is wrong when loading file!

   run compare over LOTS of matches
   make monte carlo choose random if tie

   explicit exclude of potential game ending move
      explicit exclude of all chances for opponent to shoot?
         add unit tests for this
       
   upload bot!

   spreadsheet profile of opponents
      run grep on match logs
       scrape logs to find their output
   
sort out deployment---------------
        known issue: with cell.cpp (global method)
        known issue: with std::ceil line
           c++ std?
        known issue: incorrect case in header includes
        copy bot folder
        drag in gameengine and random lib
        remove bin/rounds
        make changes to makefile (folders)
        get rid of all cerr?
           use a log wrapper function that can be disabled
         make sure its not a debug build
         undefine EXCEPTION_ON_ERROR

MISC NOTES--------------------
to scan match logs for No Commands:

find . -wholename "*JP3/PlayerCommand*" -exec grep -A 1 "No Command" {} +
find . -wholename "*JP3/PlayerCommand*" -exec grep -A 1 "nothing" {} +

BRAINSTORMING---------------------------------------------------------------------------------------

    try
       playthroughs considering only nearby worms
        if theres a tie choose random
        monte carlo with evaluation
            bias moves in favour of continuing in the same direction
            getting invalid moves
            check which one is better, trim or no
            returns scores from playthroughs (not just +/-1)
            run sims on a per worm basis
            run matches with extended play time
                confirm that longer playtime makes smarter bot
                check if bot wins sooner with longer play time?
        minimax with evaluation
            plug in strategies for each player
            learn/estimate strategy while you play??
        "mixed" strategy?

        coward worms? make the enemy waste time

        if you don't use select early on you've wasted it
         check if im just using +-1 for playthroughs - should prob add bias there
         disregard moves that would result in instant loss...
         penalise playthroughs that result in loss heavily
         do the move-in-a-line bias for yourself and the other worms

         (the opponent worms, during the playthrough)
         Prune the search tree by recognising symmetries

insights from replays-----------------------------------------------------------------
        bots can get "lost" if they are in wide open spaces
            check confidence of next move, use heuristics if not sure?
            happened against nico beukes
        reference bot strategy is quite popular
        
to run bot on state file:--------------------------------------------
 - copy file to bin/rounds/roundnumber/state.json
 - cd into bin folder
 - run bot
 - input round number


bot description --------------------------------------------------------------------
jp2 - what i submitted for Early Bird.  basic monte carlo, buggy
jp3 - jp2 with various bug fixes
jp4 - jp3 with optimizations to GetRandomMoveForWorm and added multithreading.  Plies/s up from ~600k to 1.2M
jp5 - jp4 with simple bananas - consider chucking at any enemies in range
jp6 - added radius of worms to consider

results analysis --------------------------------------------------------------------
increasing depth to 24 - no noticable improvement
   reducing to 15 - seems to actually be a bit worse
   reducing to 7 - noticably better than jp2, and does better against reference bot

using scorediff, and modifying c to 4, putting playthrough depth back to 24
   lost every game think i did it wrong....
   looking at UCT scores, looks like it converges too quickly, so try raising c to 8
   Need to get back to this after bug fixes

upped the time limit to 3s, improvement not great.  beats reference bot and 1s jp2 66% of the time
   (wins/draws/losses):     reference-bot            jp2                      jp3                      
   reference-bot:           0/0/0                    15/0/5                   5/0/15                   (20/0/20)
   jp2:                     5/0/15                   0/0/0                    6/0/14                   (11/0/29)
   jp3:                     15/0/5                   14/0/6                   0/0/0                    (29/0/11)

after fixing some edge case bugs in the engine and putting playthrough depth back to 24 (engine version 2019.2.1):
   (wins/draws/losses):     reference-bot            jp2                      jp3                      
   reference-bot:           0/0/0                    84/0/53                  70/0/67                  (154/0/120)
   jp2:                     53/0/84                  0/0/0                    17/0/120                 (70/0/204)
   jp3:                     67/0/70                  120/0/17                 0/0/0                    (187/0/87)

after optimising engine and adding multithreading (depth still 24) (engine version 2019.2.2)
(wins/draws/losses):     reference-bot            jp3                      jp2                      
reference-bot:           0/0/0                    10/0/23                  17/0/16                  (27/0/39)
jp3:                     23/0/10                  0/0/0                    19/0/14                  (42/0/24)
jp2:                     16/0/17                  14/0/19                  0/0/0                    (30/0/36)

some more of the same^ but redirecting std::err to /dev/null (suspect foul play by jp2)

(wins/draws/losses):     reference-bot            jp3                      jp2                      
reference-bot:           0/0/0                    16/0/16                  16/0/16                  (32/0/32)
jp3:                     16/0/16                  0/0/0                    20/0/12                  (36/0/28)
jp2:                     16/0/16                  12/0/20                  0/0/0                    (28/0/36)

bringing back the old one as jp3 and making current one jp4:

Engine version: 2019.2.2
(wins/draws/losses):     reference-bot            jp2                      jp3                      jp4                      
reference-bot:           0/0/0                    26/0/19                  21/0/24                  18/0/27                  (65/0/70)
jp2:                     19/0/26                  0/0/0                    4/2/39                   6/2/37                   (29/4/102)
jp3:                     24/0/21                  39/2/4                   0/0/0                    9/0/36                   (72/2/61)
jp4:                     27/0/18                  37/2/6                   36/0/9                   0/0/0                    (100/2/33)

Added banana bombs! still has bugs tho
Engine version: 2019.2.2
(wins/draws/losses):     jp5                      jp4                      
jp5:                     0/0/0                    29/0/12                  (29/0/12)
jp4:                     12/0/29                  0/0/0                    (12/0/29)

Engine version: 2019.2.2
(wins/draws/losses):     jp5                      jp3                      jp2                      reference-bot            
jp5:                     0/0/0                    12/0/6                   18/0/0                   18/0/0                   (48/0/6)
jp3:                     6/0/12                   0/0/0                    11/0/7                   13/0/5                   (30/0/24)
jp2:                     0/0/18                   7/0/11                   0/0/0                    8/0/10                   (15/0/39)
reference-bot:           0/0/18                   5/0/13                   10/0/8                   0/0/0                    (15/0/39)

added radius, seems to make things worse :/ same code with infinite radius:------------------------------------------------------------------------
Engine version: 2019.2.2
(wins/draws/losses):     jp6                      jp5                      reference-bot            
jp6:                     0/0/0                    19/0/12                  27/0/4                   (46/0/16)

made radius (distance to nearest enemy)*2---------------------------------------------------------------------------------------------
Engine version: 2019.2.2
(wins/draws/losses):     jp6                      jp5                      jp4                      reference-bot            
jp6:                     0/0/0                    0/0/32                   16/0/16                  26/0/6                   (42/0/54)

infinite radius - seems to be no different to jp5 :/ -------------------------------------------------------------------------------------
Engine version: 2019.2.2
(wins/draws/losses):     jp6                      jp5                      jp4                      reference-bot            
jp6:                     0/0/0                    21/0/24                  42/0/3                   43/0/2                   (106/0/29)

add weighted playthroughs... (combined more than 1 run's results here)----------------------------------------------------------------------------------
Engine version: 2019.2.2
(wins/draws/losses):     jp6                      jp5                      reference-bot            
jp6:                     0/0/0                    48/0/24                  31/0/0           

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#0  0x000000000040fbb6 in std::sqrt<int> (__x=4) at /usr/include/c++/5/cmath:495
#1  Position::EuclideanDistanceTo (this=this@entry=0x7ffff80071e0, other=...) at ../../GameEngine/GameState/Position.cpp:32
#2  0x000000000040fc09 in Position::BananaCanReach (this=this@entry=0x7ffff80071e0, other=...) at ../../GameEngine/GameState/Position.cpp:42
#3  0x000000000040c883 in NextTurn::GetValidBananas (player1=player1@entry=false, state=std::shared_ptr (count 5, weak 0) 0x7ffff80008d0, trimStupidMoves=trimStupidMoves@entry=true)
    at ../../GameEngine/NextTurn.cpp:138
#4  0x000000000040d1f1 in NextTurn::GetRandomValidMoveForPlayer (player1=false, state=std::shared_ptr (count 5, weak 0) 0x7ffff80008d0, trimStupidMoves=true) at ../../GameEngine/NextTurn.cpp:186

#0  Position::EuclideanDistanceTo (this=this@entry=0x7ffff0007230, other=...) at ../../GameEngine/GameState/Position.cpp:30
#1  0x000000000040fc09 in Position::BananaCanReach (this=this@entry=0x7ffff0007230, other=...) at ../../GameEngine/GameState/Position.cpp:42
#2  0x000000000040c883 in NextTurn::GetValidBananas (player1=player1@entry=false, state=std::shared_ptr (count 5, weak 0) 0x7ffff00008d0, trimStupidMoves=trimStupidMoves@entry=true)
    at ../../GameEngine/NextTurn.cpp:138
#3  0x000000000040d1f1 in NextTurn::GetRandomValidMoveForPlayer (player1=false, state=std::shared_ptr (count 5, weak 0) 0x7ffff00008d0, trimStupidMoves=true) at ../../GameEngine/NextTurn.cpp:186


#0  0x000000000040c874 in NextTurn::GetValidBananas (player1=player1@entry=false, state=std::shared_ptr (count 5, weak 0) 0x7ffff00008d0, trimStupidMoves=trimStupidMoves@entry=true)
    at ../../GameEngine/NextTurn.cpp:136
#1  0x000000000040d1f1 in NextTurn::GetRandomValidMoveForPlayer (player1=false, state=std::shared_ptr (count 5, weak 0) 0x7ffff00008d0, trimStupidMoves=true) at ../../GameEngine/NextTurn.cpp:186


#0  0x00000000004142bd in GameState::Cell_at (this=0x7ffff80008d0, pos=...) at ../../GameEngine/GameState/GameState.cpp:185
#1  0x000000000040c871 in NextTurn::GetValidBananas (player1=player1@entry=false, state=std::shared_ptr (count 5, weak 0) 0x7ffff80008d0, trimStupidMoves=trimStupidMoves@entry=true)
    at ../../GameEngine/NextTurn.cpp:137
#2  0x000000000040d1f1 in NextTurn::GetRandomValidMoveForPlayer (player1=false, state=std::shared_ptr (count 5, weak 0) 0x7ffff80008d0, trimStupidMoves=true) at ../../GameEngine/NextTurn.cpp:186



#7  0x000000000041485f in std::vector<Worm*, std::allocator<Worm*> >::push_back(Worm*&&) (__x=<unknown type in /mnt/c/Users/jpdac/dev/entellect_challenge_2019/bots/jp6/bin/cppbot.exe, CU 0xab928, DIE 0xbce29>,
    this=0x7ffffdd2fb80) at /usr/include/c++/5/bits/stl_vector.h:932
#8  GameState::AllWorms (this=0x7ffff00008d0) at ../../GameEngine/GameState/GameState.cpp:206
#9  0x000000000040a0a7 in GameEngine::ApplyPowerups (this=this@entry=0x7ffffdd2fe00) at ../../GameEngine/GameEngine.cpp:79
#10 0x000000000040a7af in GameEngine::AdvanceState (this=this@entry=0x7ffffdd2fe00, player1_command=..., player2_command=...) at ../../GameEngine/GameEngine.cpp:47

#6  0x000000000041488f in std::vector<Worm*, std::allocator<Worm*> >::push_back(Worm*&&) (__x=<unknown type in /mnt/c/Users/jpdac/dev/entellect_challenge_2019/bots/jp6/bin/cppbot.exe, CU 0xab928, DIE 0xbce29>,
    this=0x7ffffe53fb80) at /usr/include/c++/5/bits/stl_vector.h:932
#7  GameState::AllWorms (this=0x7ffff80008d0) at ../../GameEngine/GameState/GameState.cpp:209
#8  0x000000000040a0a7 in GameEngine::ApplyPowerups (this=this@entry=0x7ffffe53fe00) at ../../GameEngine/GameEngine.cpp:79
#9  0x000000000040a7af in GameEngine::AdvanceState (this=this@entry=0x7ffffe53fe00, player1_command=..., player2_command=...) at ../../GameEngine/GameEngine.cpp:47




#0  0x000000000040cea6 in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x7ffff00008c0) at /usr/include/c++/5/bits/shared_ptr_base.h:147
#1  std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7ffffdd2fb28, __in_chrg=<optimized out>) at /usr/include/c++/5/bits/shared_ptr_base.h:659
#2  std::__shared_ptr<GameState, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x7ffffdd2fb20, __in_chrg=<optimized out>) at /usr/include/c++/5/bits/shared_ptr_base.h:925
#3  std::shared_ptr<GameState>::~shared_ptr (this=0x7ffffdd2fb20, __in_chrg=<optimized out>) at /usr/include/c++/5/bits/shared_ptr.h:93
#4  NextTurn::GetValidShoots (player1=player1@entry=true, state=std::shared_ptr (count 5, weak 0) 0x7ffff00008d0, trimStupidMoves=trimStupidMoves@entry=true) at ../../GameEngine/NextTurn.cpp:89
#5  0x000000000040d193 in NextTurn::GetRandomValidMoveForPlayer (player1=true, state=std::shared_ptr (count 5, weak 0) 0x7ffff00008d0, trimStupidMoves=true) at ../../GameEngine/NextTurn.cpp:185

#8  std::__shared_ptr<GameState, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<GameState>, GameState&> (__a=..., __tag=..., this=<synthetic pointer>) at /usr/include/c++/5/bits/shared_ptr_base.h:1097
#9  std::shared_ptr<GameState>::shared_ptr<std::allocator<GameState>, GameState&> (__a=..., __tag=..., this=<synthetic pointer>) at /usr/include/c++/5/bits/shared_ptr.h:319
#10 std::allocate_shared<GameState, std::allocator<GameState>, GameState&> (__a=...) at /usr/include/c++/5/bits/shared_ptr.h:620
#11 std::make_shared<GameState, GameState&> () at /usr/include/c++/5/bits/shared_ptr.h:636
#12 runMC (stopTime=1562999242421381000, mc=std::shared_ptr (count 3, weak 0) 0x645980, state1=std::shared_ptr (count 3, weak 0) 0x63e960, ImPlayer1=<optimized out>, playthroughDepth=24)
    at cppbot/cppbot.cpp:176





#0  std::bitset<8ul>::_Unchecked_set (__val=<optimized out>, __pos=<optimized out>, this=<optimized out>) at /usr/include/c++/5/bitset:1036
#1  std::bitset<8ul>::set (__val=<optimized out>, __position=<optimized out>, this=<optimized out>) at /usr/include/c++/5/bitset:1084
#2  NextTurn::GetValidTeleportDigs (player1=player1@entry=false, state=std::shared_ptr (count 5, weak 0) 0x7ffff80008d0, trimStupidMoves=trimStupidMoves@entry=true) at ../../GameEngine/NextTurn.cpp:64
#3  0x000000000040d137 in NextTurn::GetRandomValidMoveForPlayer (player1=false, state=std::shared_ptr (count 5, weak 0) 0x7ffff80008d0, trimStupidMoves=true) at ../../GameEngine/NextTurn.cpp:184

#0  runMC (stopTime=1562999322862701300, mc=std::shared_ptr (count 3, weak 0) 0x645200, state1=std::shared_ptr (count 3, weak 0) 0x63e960, ImPlayer1=<optimized out>, playthroughDepth=24)
at cppbot/cppbot.cpp:181

